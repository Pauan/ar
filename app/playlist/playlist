#! /usr/bin/env arc

;; TODO: import is Nu specific
;(import script strings sxml boyer-moore) ; parse-script-args
(import strings sxml boyer-moore) ; parse-script-args

;; TODO: parameter is Nu specific
(parameter current-playlist)

(= ;verbose    nil
   files-by-title   (obj)
   processed        (obj)

   playlist-errors  (obj)
   other-errors     nil)

;; TODO
#|(parse-script-args
  ("-v" "--verbose" (= verbose t)))|#


#|(def prn-verbose args
  (when verbose
    (w/stdout (stderr)
      (apply prn args))))|#

;; TODO: should be in strings.arc
(def xml-encode (s)
  (multisubst '(("&" "&amp;")
                ("<" "&lt;")) s))

;; TODO: should be elsewhere
(mac zap2 (f x y . args)
  `(= ,y (,f ,x ,y ,@args)))


(def dirall-ext (exts)
  ;; TODO: dirall is Nu specific
  (dirall nil (fn (x)
                ;(prn x " " (dir-exists x))
                     ;; TODO: hidden-file? is Nu specific
                (and (no:hidden-file? x)
                         ;; TODO: dirname is Nu specific
                         ;; dirname
                     (or (dir-exists x)
                               ;; TODO: extension is Nu specific
                         (some (sym:downcase:extension x) exts))))))


(= all-files (dirall-ext '(webm mp3 mp4 ogm ogg wma mid flv wav)))


(redef boyer-multi-match1 (patterns inputs every)
  (trues (fn (pat)
           (car:keep (fn (in)
                       (awhen (boyer-moore-search pat in)
                         (when every
                           (every car.pat in))
                         in))
                     inputs))
         patterns))

(def multi-string-filter (patterns
                          strings
                          (o missing  [err:string "  -> the pattern \"" _ "\" did not match anything\n"])
                          (o pattern  (fn (p (l r))
                                        (err:string "  -> the pattern \"" p "\" matched both:\n      \"" l "\"\n      \"" r "\"\n")))
                          (o file     (fn (p (l r))
                                        (err:string "  -> the file \"" p "\" was matched by both:\n      \"" l "\"\n      \"" r "\"\n"))))
  (withs (track   (obj)
          files   (obj)
          errors  nil
          matches (boyer-multi-match patterns strings
                    (fn (x y)
                      (if files.y
                            (push (catcherr:file y (list files.y x)) errors)
                          track.x
                            (push (catcherr:pattern x (list track.x y)) errors))
                      (= files.y x
                         track.x y))))

    (each x patterns
      (if (no track.x)
        (push (catcherr:missing x)
              errors)))

    (when errors
      (zap2 string rev.errors
                                     ;; TODO: current-playlist is Nu specific
                   (playlist-errors:alref current-playlist 'title))
      #|(push (string " Playlist \"" (alref current-playlist 'title) "\" has errors:\n"
                    (intersperse "\n" rev.errors) "\n")
            all-errors)|#
      )

    matches))


;(require profile)

#|(def create-dependency-graph (x)
  ((afn (x)

     (self cdr.x)
     )
   x))|#
#|
(def include (xs title)
  ;; TODO: should use ret
  (let items nil
    ;(prn titles)
    (each x xs
      ;(prn x " " (cdr:assoc 'playlist titles.x))
      (iflet x titles.x ;; TODO: ew
        (zap join items (cdr:assoc 'playlist x)) ;(include x)
                          ;; TODO: ew
        (warn:string "\"" title
                     "\" tried to include \"" x
                     "\" but could not find it")))
    items))
|#

#|(def includer (val)
  (awhen (cdr:assoc 'playlist val)
    (each x it
      (when (caris x 'w/playlist)
        (let x (titles cadr.x)
          (push x playlists)
          (includer x)))))
  (awhen (cdr:assoc 'include val)
    (each x it
      (let x titles.x
        (push x playlists)
        (includer x)))))|#

(def playlist (x)
  ((afn (x files acc)
     (let c car.x
       (if (no x)
             (join files
                   (multi-string-filter rev.acc all-files))
           (acons c)
             (if (caris c 'w/folder)
                   (let n cadr.c
                     (self cdr.x
                           (join files
                                 (multi-string-filter rev.acc all-files)
                                                             ;; TODO: don't call (keep [posmatch ...] ...)
                                 (multi-string-filter cddr.c (keep [posmatch n _] all-files)))
                           nil))
                 (caris c 'w/playlist)
                   (self cdr.x
                         (join files
                               (multi-string-filter rev.acc all-files)
                               (multi-string-filter cddr.c (include cadr.c)))
                         nil)
                 (err "invalid expression" c))
           (self cdr.x
                 files
                 (cons c acc)))))
   x nil nil))

(def include1 (x)
  (w/current-playlist x
    ((afn (x files acc)
       (let c car.x
         (if (no x)
               (join (multi-string-filter rev.acc all-files)
                     files)
             (caris c 'title)
               (self cdr.x files acc)
             (caris c 'include)
               (join (mappend include cdr.c)
                     (self cdr.x files acc))
             (caris c 'playlist)
               (self cdr.x
                     (join (playlist cdr.c) files)
                     acc)
             (err "invalid expression" c))))
     x nil nil)))

#|  (with (included  nil
         files     nil)
    (each x x
      (if (acons x)
            (if (caris x 'w/folder)
                  (let n (+ cadr.x "/")
                    ;; TODO: zap2
                    (= included (join (multi-string-filter cddr.x (keep [posmatch n _] all-files))
                                      included)))
                (caris x 'w/playlist)
                  (let n cadr.x
                    ;; TODO: zap2
                    (= included (join (include n)
                                      included)))
                (err "invalid expression" x))
          (push x files)))
    (join (rev:multi-string-filter files all-files) rev.included))|#

(def include (x)
  #|(or= processed.x (do (debug "processing playlist \"" x "\"")
                       (include1 files-by-title.x)))|#
  ;; grr, setting a hash key to nil deletes it,
  ;; so I have to use Racket's hash-ref! instead
  ((% hash-ref!) processed x (fn () (debug "processing playlist \"" x "\"")
                                    (iflet it files-by-title.x
                                      (include1 it)
                                      ;; TODO: dont/void
                                      (do (zap2 string (string "  -> tried to include playlist \"" x "\" but it was not found\n")
                                                                         ;; TODO: current-playlist is Nu specific
                                                       (playlist-errors:alref current-playlist 'title))
                                          nil)
                                      #|                                    ;; TODO: current-playlist is Nu specific
                                      (push (string " Playlist \"" (alref current-playlist 'title) "\" tried to include playlist \"" x "\" but it was not found\n")
                                            all-errors)|#
                                      ))))


(def ->sxml (title files)
  (w/pretty:->xml
    `(playlist version  "1"
               xmlns    "http://xspf.org/ns/0/"
               xml:base ,cwd
       (title ,title)
       (trackList ,@(map (fn (x)
                           `(track
                              (location ,xml-encode.x)))
                         files))
                        ;; TODO: ew
       #|,(with (playlist (cdr:assoc 'playlist xs)
                        ;; TODO: ew
               title    (assoc 'title xs))

          #|(awhen (include (cdr:assoc 'include xs)
                          (cadr:assoc 'title xs))
                     ;include.xs
            (zap join playlist it))|#
          #|(when title
            (push title body))
          body|#
          )|#
       )))

                    ;; TODO: Nu specific
(let (input output) script-args
  ;; TODO: Nu specific
  (zap todir input)
  (zap todir output)

  ;(racket-profile-thunk (fn ()
  ;; TODO: Nu specific
  (w/cwd input
    (each x (dir ".")
          ;; TODO: Nu specific
      (if (hidden-file? x)
          ;; debug is Nu specific
          (debug "ignoring hidden file \"" input x "\"")
          (let info (readfile x)
            (iflet x (alref info 'title)
              #|(do (push info playlists)
                  (includer info))|#
              (= files-by-title.x info)
              ;; TODO: w/current-playlist is Nu specific
              #|(w/current-playlist info
                (each x info
                  (if (caris x 'include)
                        (each x cdr.x
                          (unless titles.x
                            (push x )))
                      (caris x 'playlist)
                        nil
                      ))
                                 ;; TODO: Nu specific
                ;(zap macex1 (car (assoc-ref info 'playlist)))
                ;(assoc info 'playlist)
                ;(scar (assoc-ref name index) val)
                )|#
              (push (string " File \"" input x "\" doesn't have a top-level (title) expression\n")
                    other-errors)
              )))))
  ;))

  (each (key val) files-by-title
    (include key))

  (when (or other-errors
            keys.playlist-errors)
    (w/stdout (stderr)
      (each (key val) playlist-errors
        (prn " Playlist \"" key "\" has errors:")
        (prn val))
      (each x rev.other-errors
        (prn x))
      (prn " aborting due to errors")
      (quit 1)))

  #|(when all-errors
    (w/stdout (stderr)
      (each x rev.all-errors ;; nrev
        (prn x))
      (prn " aborting due to errors")
      (quit 1)))|#

  #|(each (key val) titles
    (push val playlists)
    (includer val))

  (zap dedup playlists)|#

#|(= playlists (map (fn (x)
                    (map (fn (x)
                           (if (caris x 'title)
                                 x
                               (caris x 'include)
                                 x
                               (caris x 'playlist)
                                 (mappend (fn (x)
                                            (if (caris x 'w/folder)
                                                  (list x)
                                                (caris x 'w/playlist)
                                                  x
                                                (list x)))
                                          x)))
                         x))
                  playlists))|#

  #|(each x (map (fn (x) (alref x 'title)) playlists)
    prn.x
    ;(prn)
    )|#

;; Arc posmatch
;  Total cpu time observed: 38236ms (out of 38326ms)
;  Number of samples taken: 751 (once every 51ms)

;; Boyer-Moore-Horspool
;  Total cpu time observed: 6396ms (out of 6432ms)
;  Number of samples taken: 126 (once every 51ms)

;; Boyer-Moore-Horspool with error checking
;  Total cpu time observed: 6928ms (out of 6968ms)
;  Number of samples taken: 136 (once every 51ms)

;; Boyer-Moore-Horspool with more error checking
;  Total cpu time observed: 6890ms (out of 6920ms)
;  Number of samples taken: 135 (once every 51ms)

  (each (key val) processed
    (let val (->sxml key val)
      ;(prn val)
      ;(prn)
      ;; TODO: Nu specific
      (w/cwd output
        ;; debug is Nu specific
        (debug "writing to \"" output key ".xspf\"")
        (w/outfile out (+ key ".xspf")
          (disp val out))
      ))))
