(import nuit/parse
        parse-script-args
        url-encode
        sxml)

(var version      "3.0"
     options      (dict)
     filetypes    (list "flac" "flv" "mid" "mkv"  "mp3" "mp4"
                        "ogg"  "ogm" "wav" "webm" "wma")

     script-args  (w/parse-args script-args
                    ("-v" "--version" ()
                      "Displays the version number and exits"
                      (prn version)
                      (quit))
                    #|("-d" "--debug" ()
                      "Prints additional messages"
                      (= debug? t))|#
                    ))
                    ;((in)  "Folder where you keep your templates")
                    ;((out) "Folder where the .xspf files are written to")

(def dirall-ext (exts)
  (dirall nil (fn (x)
    (and (not (hidden-file? x))
             ; TODO use dirname ?
         (or (dir? x)
             (any y exts
               (is (downcase (extension x)) y)))))))

(var playlists  nil
     folders    nil)

(def process-string (x)
  (->re (re-escape x)))

(def process-folder (x)
  (->re (str "(?:^|/)"
             (re-escape x)
             (unless (is (last x) #\/) "/"))))

(def process-file (x)
  (list x (process-string x) folders (rev playlists)))

(def include x
  x
;  (flatten (map-fn process-file x))
  )

(def normalize-file (k v)
  (w/ playlists (cons k playlists)
    (aloop (x . rest) v
      (if (cons? x)
          (case (car x)
            "title"    (do (= playlists (cons (cadr x) (cdr playlists)))
                           (self rest))
                                            ; TODO why is this here?
            "include"  (cons (list* include (list (car playlists)) (cdr x))
                             (self rest))
            "playlist" (join (w/ playlists (cons (cadr x) playlists)
                               (self (cddr x)))
                             (self rest))
            "folder"   (join (w/ folders (cons (process-folder (cadr x)) folders)
                               (self (cddr x)))
                             (self rest))
            #|"file"     (if (assoc "ignore" (cddr x))
                           (prn "ignoring file " (cadr x))
                           (insert-file (cadr x)))|#
                       (err "invalid " (car x)))
          (cons (process-file x)
                (self rest))))))

; http://en.wikipedia.org/wiki/Injective_function
(def process-injective (strings files)
  (debug "processing " (len strings) " strings and " (len files) " files")
  (with (seen    (dict)
         pats    (dict)
         unseen  nil)
    (each file files
      (each x strings
        (unless (fn? (car x))
          (let (pat proc folders playlists) x
            (when (and (re? proc file)
                       (all x folders
                         (re? x file)))
              (push file (pats x))
              (push x (seen file))))))
      (unless (seen file)
        (push file unseen)))
    (each x strings
      (unless (pats x)
        (= (pats x) nil)))
    (list seen pats unseen)))

#|

(let processed (obj)
  (def process-file (name)
    (or= processed.name
         (mappend (fn (x)
                    (if (fn? (car x))
                        (apply x (cdr x))
                        x))
                  files.name))))|#

;=============================================================================
;  Errors
;=============================================================================
(var error? nil)

(def print-strings (x)
  (prn "  @strings")
  (each (x) x
    (prn "   " x)))

(def print-files (x)
  (prn "  @files")
  (each x x
    (prn "   " x)))

(def print-playlists (x)
  (prn "  @playlists")
  (each x (dedup (flatmap (_ _ _ x) x x))
    (prn "   " x)))

(def error ()
  (= error? t)
  (prn)
  (pr "@error "))

(def error-no-file (x)
  (error)
  (prn "string did not match any file")
  (print-strings x)
  (print-playlists x))

(def error-multi-file (x file)
  (error)
  (prn "string matched multiple files")
  (print-strings x)
  (print-files file)
  (print-playlists x))

(def error-multi-string (x file)
  (error)
  (prn "file was matched by multiple strings")
  (print-files file)
  (print-strings x)
  (print-playlists x))

;=============================================================================
;  Input, processing, and output
;=============================================================================
(def encode-path (s)
  (str "file://" (url-encode-path (str cwd s))))

(def ->sxml (title files)
  (->xml
    '("playlist" "version"  "1"
                 "xmlns"    "http://xspf.org/ns/0/"
                 "xml:base" ,cwd
       ("title" ,title)
       ("trackList" ,@(map x files
                        '("track" ("location" ,(encode-path x))))))))

(def input (folder)
  (zap ->dir folder)
  (w/ cwd folder
    (flatmap name (dir)
      (if (dir? name)
            (debug "ignoring folder \"" folder name "\"")
          (hidden-file? name)
            (debug "ignoring hidden file \"" folder name "\"")
          (let value (w/infile s name (parse s))
            (normalize-file name value))))))

(def output (dict unseen folder)
  (zap ->dir folder)
  (= (dict "All")    (dirall-ext filetypes))
  (= (dict "Unseen") unseen)
  (each (k v) dict
    (if v
        (let v (->sxml k (sort v))
          (debug "writing to \"" folder k ".xspf\"")
          (w/ cwd folder
            (w/outfile out (str k ".xspf")
              (w/ stdout out
                (pr v)))))
        (debug "ignoring playlist \"" k "\" because it is empty"))))

(let time (msec)
  (let (files pats unseen) (process-injective (input (car script-args))
                                              (dirall-ext filetypes))
    (debug "took " (- (msec) time) " msec to process all strings")
    (let seen (dict)
      (each (k v) files
        (if (is (len v) 1)
            (let (_ _ _ x) (car v)
              (each x x
                (push k (seen x))))
            (error-multi-string v (list k))))

      (each (k v) pats
        (case (len v)
          0 (error-no-file (list k))
          1 nil
            (error-multi-file (list k) v)))

      (when error?
        (prn)
        (prn "aborting due to errors")
        (quit 1))

      (output seen unseen (cadr script-args)))))
