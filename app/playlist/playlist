#! /usr/bin/env arc

;; TODO: import is Nu specific
(import strings sxml boyer-moore) ; parse-script-args

;; TODO: parameter is Nu specific
(parameter current-playlist)

(= files-by-title   (obj)
   processed        (obj)

   playlist-errors  (obj)
   other-errors     nil)

;; TODO
#|(parse-script-args
  ("-v" "--verbose" (= verbose t)))|#


;; TODO: should be in strings.arc
(def xml-encode (s)
  (multisubst '(("&" "&amp;")
                ("<" "&lt;")) s))

;; TODO: should be elsewhere
(mac zap2 (f x y . args)
  `(= ,y (,f ,x ,y ,@args)))

#|
;; TODO: should be elsewhere
(def errp args
  (err:tostring:apply pr args))|#


(def dirall-ext (exts)
  ;; TODO: dirall is Nu specific
  (dirall nil (fn (x)
                     ;; TODO: hidden-file? is Nu specific
                (and (no:hidden-file? x)
                         ;; TODO: dirname is Nu specific
                         ;; dirname
                     (or (dir-exists x)
                               ;; TODO: extension is Nu specific
                         (some (sym:downcase:extension x) exts))))))


(= all-files (dirall-ext '(flac flv mid mkv mp3 mp4 ogg ogm wav webm wma)))


;; other-err
(def oerr args
  (push (tostring:apply prn args)
        other-errors)
  nil)

;; playlist-err
(def perr args
  (zap2 string (tostring:apply prn args)
                                      ;; TODO: current-playlist is Nu specific
               (playlist-errors:alref current-playlist 'title))
  nil)


(redef boyer-multi-match1 (patterns inputs every)
  (trues (fn (pat)
           (car:keep (fn (in)
                       (awhen (boyer-moore-search pat in)
                         (when every
                           (every car.pat in))
                         in))
                     inputs))
         patterns))

(def multi-string-filter (patterns
                          strings
                          (o missing  [perr "  -> the pattern \"" _ "\" did not match anything"])
                          (o pattern  (fn (p l r)
                                        (perr "  -> the pattern \"" p "\" matched both:\n      \"" l "\"\n      \"" r "\"")))
                          (o file     (fn (p l r)
                                        (perr "  -> the file \"" p "\" was matched by both:\n      \"" l "\"\n      \"" r "\""))))
  (withs (track   (obj)
          files   (obj)
          ;errors  nil
          matches (boyer-multi-match patterns strings
                    (fn (x y)
                      (if files.y
                            (file y files.y x)
                            ;(push (catcherr:file y (list files.y x)) errors)
                          track.x
                            (pattern x track.x y)
                            ;(push (catcherr:pattern x (list track.x y)) errors)
                            )
                      (= files.y x
                         track.x y))))

    (each x patterns
      (unless track.x
        (missing x)
        #|(push (catcherr:missing x)
              errors)|#
        ))

    #|(when errors
      (apply playlist-err rev.errors)
      #|(zap2 string rev.errors
                                          ;; TODO: current-playlist is Nu specific
                   (playlist-errors:alref current-playlist 'title))|#
      )|#

    matches))

#|(def playlist (x)
  ((afn (x files acc)
     (let c car.x
       (if (no x)
             (join files
                   (multi-string-filter rev.acc all-files))
           (acons c)
             (if (caris c 'w/folder)
                   (self cdr.x
                         (match-folder c acc)
                         nil)
                 (caris c 'w/playlist)
                   (self cdr.x
                         (join files
                               (multi-string-filter rev.acc all-files)
                               (multi-string-filter cddr.c (include cadr.c)))
                         nil)
                 (caris c 'ignore)
                   (self cdr.x
                         (cons c files)
                         acc)
                 (err "invalid expression" c))
           (self cdr.x
                 files
                 (cons c acc)))))
   x nil nil))|#

(def match-all-files (x)
                       ;; TODO: error checking for invalid expressions
  (multi-string-filter (rem [caris _ 'ignore] x)
                       all-files))

(def include1 (x)
  (let c car.x
    (if (no x)
          nil
        (caris c 'title)
          (include1 cdr.x)
        (caris c 'include)
          (join (mappend include cdr.c)
                (include1 cdr.x))
        #|(caris c 'playlist)
          (self cdr.x
                (join (playlist cdr.c) files)
                acc)|#
        (caris c 'w/playlist)
          (join (multi-string-filter cddr.c (include cadr.c))
                (include1 cdr.x))
        (caris c 'w/folder)
          (let n cadr.c
            ;; TODO: don't call (keep [posmatch ...] ...)
            (join (multi-string-filter cddr.c (keep [posmatch n _] all-files))
                  (include1 cdr.x)))
        (caris c 'w/all-files)
          (join (match-all-files cdr.c)
                (include1 cdr.x))
        (do (perr "  -> invalid expression: " c)
            (include1 cdr.x))
        ;(errp "invalid expression in playlist \"" (alref p 'title) "\": " c)
        )))

(def include (x)
  ;; grr, setting a hash key to nil deletes it,
  ;; so I have to use Racket's hash-ref! instead
  ((% hash-ref!) processed x (fn () (debug "processing playlist \"" x "\"")
                                    (iflet it files-by-title.x
                                      ;; TODO: w/current-playlist is Nu specific
                                      (w/current-playlist it
                                        (include1 it))
                                      (perr "  -> tried to include playlist \"" x "\" but could not find it")))))


(def ->sxml (title files)
  (w/pretty:->xml
    `(playlist version  "1"
               xmlns    "http://xspf.org/ns/0/"
               xml:base ,cwd
       (title ,title)
       (trackList ,@(map (fn (x)
                           `(track
                              (location ,xml-encode.x)))
                         files)))))


;(require profile)

                    ;; TODO: Nu specific
(let (input output) script-args
  ;; TODO: Nu specific
  (zap todir input)
  (zap todir output)

  ;; TODO: Nu specific
  (w/cwd input
    (each x (dir ".")
          ;; TODO: Nu specific
      (if (hidden-file? x)
          ;; debug is Nu specific
          (debug "ignoring hidden file \"" input x "\"")
          (let info (readfile x)
            (iflet x (alref info 'title)
              (= files-by-title.x info)
              (oerr " File \"" input x "\" doesn't have a top-level (title) expression"))))))

  ;(%.profile-thunk (fn ()
  (each (key val) files-by-title
    (include key))
  ;))

  (when (or other-errors
            keys.playlist-errors)
    (w/stdout (stderr)
      (each (key val) playlist-errors
        (prn " Playlist \"" key "\" has errors:")
        (prn val))
      (each x rev.other-errors
        (prn x))
      (prn " aborting due to errors")
      (quit 1)))

;; Arc posmatch
;  Total cpu time observed: 38236ms (out of 38326ms)
;  Number of samples taken: 751 (once every 51ms)

;; Boyer-Moore-Horspool
;  Total cpu time observed: 6396ms (out of 6432ms)
;  Number of samples taken: 126 (once every 51ms)

;; Boyer-Moore-Horspool with error checking
;  Total cpu time observed: 6928ms (out of 6968ms)
;  Number of samples taken: 136 (once every 51ms)

;; Boyer-Moore-Horspool with more error checking
;  Total cpu time observed: 6890ms (out of 6920ms)
;  Number of samples taken: 135 (once every 51ms)

  (each (key val) processed
    (let val (->sxml key val)
      ;; TODO: Nu specific
      (w/cwd output
        ;; debug is Nu specific
        (debug "writing to \"" output key ".xspf\"")
        (w/outfile out (+ key ".xspf")
          (disp val out))
      ))))
