#lang racket/base

(provide (all-defined-out))

(require "../../../compiler")

(display 2)
(display " ")
(displayln (globals))

(require ffi/unsafe)
(require racket/unsafe/ops)
(require racket/tcp)
(require racket/port)
(require racket/system)

(compile-allow-set!-undefined #t)

;=============================================================================
;  atstrings
;=============================================================================
(define atstrings (make-parameter #f))

(define (unescape-ats s)
  (list->string (let self ((cs (string->list s)))
                  (cond ((null? cs)
                          cs)
                        ((and (eqv? (car cs) #\@)
                              (not (null? (cdr cs)))
                              (eqv? (cadr cs) #\@))
                          (self (cdr cs)))
                        (else
                          (cons (car cs) (self (cdr cs))))))))

; First unescaped @ in s, if any.  Escape by doubling.
(define (atpos s i)
         ;; TODO: shouldn't this use = ?
  (cond ((eqv? i (string-length s))
          #f)
        ((eqv? (string-ref s i) #\@)
          (if (and (< (+ i 1) (string-length s))
                   (not (eqv? (string-ref s (+ i 1)) #\@)))
              i
              (atpos s (+ i 2))))
        (else
          (atpos s (+ i 1)))))

(define (codestring s)
  (let ((i (atpos s 0)))
    (if i  (cons (substring s 0 i)
                 (let* ((rest (substring s (+ i 1)))
                        (in   (open-input-string rest))
                        (expr ((ac-read) in))
                        (i2   (let-values (((x y z) (port-next-location in))) z)))
                   (close-input-port in)
                   (cons expr (codestring (substring rest (- i2 1))))))
           (list s))))

(ac-string (lambda (s)
  (if (atstrings)
      (if (atpos s 0)
                    ; TODO ->orig-box
          (ac (cons (->box 'string)
                    (map (lambda (x)
                           (if (string? x)
                               (unescape-ats x)
                               x))
                         (codestring s))))
          (list string-copy (unescape-ats s)))
      ; avoid immutable strings
      (list string-copy s))))

;=============================================================================
;  I/O
;=============================================================================
(define explicit-flush (make-parameter #f))

(define (make-print f)
  (lambda (x (out (current-output-port)))
    (print f x out)
    (unless (explicit-flush) (flush-output out))
    nil))

(define (read-from-string str)
  (let* ((port  (open-input-string str))
         (val   ((ac-read) port)))
    (close-input-port port)
    val))

;; TODO: not exposed to Arc, but maybe should be
(define (close1 p)
  (cond ((input-port? p)    (close-input-port p))
        ((output-port? p)   (close-output-port p))
        ((tcp-listener? p)  (tcp-close p))
        (else               (error "can't close " p))))

; sread = scheme read. eventually replace by writing read
(define (sread p eof)
  (let ((expr (read p)))
    (if (eof-object? expr)
        eof
        (dottedrec sym->nil expr)))) ; TODO: why does this call sym->nil?

(ac-read (lambda (x) (sread x eof)))

;=============================================================================
;  Atomic thread stuff
;=============================================================================
; make sure only one thread at a time executes anything
; inside an atomic-invoke. atomic-invoke is allowed to
; nest within a thread; the thread-cell keeps track of
; whether this thread already holds the lock.
(define the-sema  (make-semaphore 1))
(define sema-cell (make-thread-cell #f))

; there are two ways to close a TCP output port.
; (close o) waits for output to drain, then closes UNIX descriptor.
; (force-close o) discards buffered output, then closes UNIX desc.
; web servers need the latter to get rid of connections to
; clients that are not reading data.
; mzscheme close-output-port doesn't work (just raises an error)
; if there is buffered output for a non-responsive socket.
; must use custodian-shutdown-all instead.
(define custodians (make-hash))

(define (associate-custodian c i o)
  (hash-set! custodians i c)
  (hash-set! custodians o c))

; if a port has a custodian, use it to close the port forcefully.
; also get rid of the reference to the custodian.
; sadly doing this to the input port also kills the output port.
(define (try-custodian p)
  (let ((c (hash-ref custodians p #f)))
    (if c (begin (custodian-shutdown-all c)
                 (hash-remove! custodians p)
                 #t)
          #f)))

;=============================================================================
;  ssyntax
;=============================================================================
; Though graphically the right choice, can't use _ for currying
; because then _!foo becomes a function.  Maybe use <>.  For now
; leave this off and see how often it would have been useful.

; Might want to make ~ have less precedence than &, because
; ~foo&bar prob should mean (andf (complement foo) bar), not
; (complement (andf foo bar)).
(define (symbol->chars x) (string->list (symbol->string x)))

;; TODO: why does this count backwards...? efficiency, maybe?
(define (has-ssyntax-char? string i)
  (and (>= i 0)
       (or (let ((c (string-ref string i)))
             (or (eqv? c #\:) (eqv? c #\~)
                 (eqv? c #\&)
                 ;(eqv? c #\_)
                 (eqv? c #\.)  (eqv? c #\!)))
           (has-ssyntax-char? string (- i 1)))))

(define (tokens test source token acc keepsep?)
  (cond ((null? source)
          (reverse (if (pair? token)
                       (cons (reverse token) acc)
                       acc)))
        ((test (car source))
          (tokens test
                  (cdr source)
                  null
                  (let ((rec (if (null? token)
                                 acc
                                 (cons (reverse token) acc))))
                    (if keepsep?
                        (cons (car source) rec)
                        rec))
                  keepsep?))
        (else
          (tokens test
                  (cdr source)
                  (cons (car source) token)
                  acc
                  keepsep?))))

(define (ssyntax? x)
  (and (symbol? x)
       ;(not (or (eq? x '+) (eq? x '++) (eq? x '_)))
       (let ((name (symbol->string x)))
         (has-ssyntax-char? name (- (string-length name) 1)))))

(define (chars->value chars) (read-from-string (list->string chars)))
(define (insym? char sym) (member char (symbol->chars sym)))

(define (expand-compose sym)
  (let ((elts (map (lambda (tok)
                     (if (eqv? (car tok) #\~)
                         (if (null? (cdr tok))
                             ; TODO ->orig-box
                             (->box 'no)
                                   ; TODO ->orig-box
                             (list (->box 'complement) (chars->value (cdr tok))))
                         (chars->value tok)))
                   (tokens (lambda (c) (eqv? c #\:))
                           (symbol->chars sym)
                           null
                           null
                           #f))))
    (if (null? (cdr elts))
        (car elts)
              ; TODO ->orig-box
        (cons (->box 'compose) elts))))

(define (build-sexpr toks orig)
  (cond ((null? toks)
          ; TODO ->orig-box
          (->box 'get))
        ((null? (cdr toks))
          (chars->value (car toks)))
        (else
          (list (build-sexpr (cddr toks) orig)
                (if (eqv? (cadr toks) #\!)
                          ; TODO ->orig-box
                    (list (->box 'quote) (chars->value (car toks)))
                    (if (or (eqv? (car toks) #\.) (eqv? (car toks) #\!))
                        (error "bad ssyntax" orig)
                        (chars->value (car toks))))))))

(define (expand-and sym)
  (let ((elts (map chars->value
                   (tokens (lambda (c) (eqv? c #\&))
                           (symbol->chars sym)
                           null
                           null
                           #f))))
    (if (null? (cdr elts))
        (car elts)
              ; TODO ->orig-box
        (cons (->box 'andf) elts))))

(define (expand-sexpr sym)
  (build-sexpr (reverse (tokens (lambda (c) (or (eqv? c #\.) (eqv? c #\!)))
                                (symbol->chars sym)
                                null
                                null
                                #t))
               sym))

;; TODO: better definition of ssexpand
(define (ssexpand sym)
  (cond ((or (insym? #\: sym) (insym? #\~ sym))  (expand-compose sym))
        ((or (insym? #\. sym) (insym? #\! sym))  (expand-sexpr sym))
        ((insym? #\& sym)                        (expand-and sym))
        (else                                    (error "unknown ssyntax" sym))))

(ac-ssexpand (lambda (x)
  (if (ssyntax? x)
      (ssexpand x)
      x)))

;=============================================================================
;  Macro/function stuff
;=============================================================================
;; the next two are optimizations, except work for macros.
(define (de-compose fns args)
        ;; TODO: is this needed anywhere in Arc or can I remove it...?
  (if ;(null? fns)       `((fn vals (car vals)) ,@args)
      (null? (cdr fns)) (cons (car fns) args)
                        (list (car fns) (de-compose (cdr fns) args))))

(define (de-andf f args)
  (let ((gs (map (lambda (x) (gensym)) args)))
        ; TODO ->orig-box
    `((,(->box 'fn) ,gs
          ; TODO ->orig-box
        (,(->box 'and) ,@(map (lambda (f) (cons f gs))
                                (cdr f))))
      ,@args)))

(ac-mac-call (lambda (c f args done)
        ; TODO orig-box?
  (cond ((eq? c 'compose)
          (ac (de-compose (cdr f) args)))
        ; TODO orig-box?
        ((eq? c 'complement)
                    ; TODO ->orig-box
          (ac (list (->box 'no) (cons (cadr f) args))))
        ; TODO orig-box?
        ((eq? c 'andf)
          (ac (de-andf f args)))
        (else
          (done)))))

(define direct-calls (make-parameter #f))

(ac-fn-call (lambda (x f args done)
        ;; inserts the actual value for things in functional position, so
        ;; (+ 1 2) compiles into (#<fn:+> 1 2)
        ;;
        ;; this is much faster than direct-calls but it's even more strict:
        ;; if you redefine any global, even functions, those changes aren't
        ;; retroactive: they affect new code, but not old code
  (cond #|(#t ;inline-calls
          (if (procedure? f)
              (cons f (ac-all args))
              (list* ref f (ac-all args))))|#
        ;; (foo bar) where foo is a global variable bound to a procedure.
        ;; this breaks if you redefine foo to be a non-fn (like a hash table)
        ;; but as long as you don't redefine anything, it's faster
        ((and (direct-calls)
              (procedure? f))
          (cons x args))
        (else
          (done)))))

;=============================================================================
;  Misc
;=============================================================================
(define sig (make-hasheq))

(define (set-sig n s v)
  (hash-set! sig n s)
  (set-name n v))

(define-syntax def
  (syntax-rules ()
    ((_ name parms #:sig sig . body)
      (set-sig 'name 'sig (lambda parms . body)))
    ((_ name parms . body)
      (set-sig 'name 'parms (lambda parms . body)))))

(define-syntax mac
  (syntax-rules ()
    ((_ name parms #:sig sig . body)
      (set-sig 'name 'sig
        (tagged 'mac (lambda parms . body))))
    ((_ name parms . body)
      (set-sig 'name 'parms
        (tagged 'mac (lambda parms . body))))))

(define-syntax assign
  (syntax-rules ()
    ((_ name #:sig sig value)
      (set-sig 'name 'sig value))
    ((_ name value)
      (set-name 'name value))))

(define (iround x) (inexact->exact (round x)))

;; generic +: strings, lists, numbers.
;; return val has same type as first argument.
(define (ac-+ x y)
        ;; TODO: better ordering for speed
  (cond ((number? x)  (+ x y))
        ((string? x)  (string-append x (coerce y 'string)))
        ((list? x)    (append x y))
        ;; TODO: check the behavior of Arc 3.1 for (+ "foo" #\a) and (+ #\a "foo")
        ((char? x)    (string-append (string x) (coerce y 'string)))
        (else         (+ x y))
                      ;(err "can't + " x " with " y)
                      ))

(define (type x)
        ;; TODO: better ordering for speed
  (cond ((tagged? x)         (tagged-type x))
        ((namespace? x)      'namespace)
        ((pair? x)           'cons)
        ;((stream? x)         'stream) ;; TODO: not sure about this
        ((symbol? x)         'sym) ;; TODO: a type for boxes? overload 'sym?
        ((null? x)           'sym) ; (type nil) -> sym
        ((procedure? x)      'fn)
        ((char? x)           'char)
        ((string? x)         'string)
        ((exact-integer? x)  'int)
        ((number? x)         'num)     ; unsure about this
        ((hash? x)           'table)
        ((output-port? x)    'output)
        ((input-port? x)     'input)
        ((tcp-listener? x)   'socket)
        ((exn? x)            'exception)
        ((thread? x)         'thread)
                             ;(err "type: unknown type" x)
                             ;; TODO: not sure about this, but seems okay
        (else                nil)))

;; TODO: list + table of types for coerce
(define (coerce x to (base 10))
  (cond ((tagged? x)         (error "can't coerce annotated object"))
        ((is? to (type x))   x)
        ((symbol? x)         (case to
                              ((string)  (symbol->string x))
                              (else      (error "can't coerce" x to))))
        ((pair? x)           (case to
                              ((string)  (apply string-append
                                                (map (lambda (y) (coerce y 'string))
                                                     x)))
                              (else      (error "can't coerce" x to))))
        ;(eq? x nil)
        ((null? x)           (case to
                              ((string)  "")
                              (else      (error "can't coerce" x to))))
        ((char? x)           (case to
                              ((int)     (char->integer x))
                              ((string)  (string x))
                              ((sym)     (string->symbol (string x)))
                              (else      (error "can't coerce" x to))))
        ((exact-integer? x)  (case to
                              ((num)     x)
                              ((char)    (integer->char x))
                              ((string)  (number->string x base))
                              (else      (error "can't coerce" x to))))
        ((number? x)         (case to
                              ((int)     (iround x))
                              ((char)    (integer->char (iround x)))
                              ((string)  (number->string x base))
                              (else      (error "can't coerce" x to))))
        ((string? x)         (case to
                              ((sym)     (string->symbol x))
                              ((cons)    (string->list x))
                              ((num)     (or (string->number x base)
                                             (error "can't coerce" x to)))
                              ((int)     (let ((n (string->number x base)))
                                           (if n  (iround n)
                                                  (error "can't coerce" x to))))
                              (else      (error "can't coerce" x to))))
        (else                (error "can't coerce" x to))))

;=============================================================================
;  New macros
;=============================================================================
(display 3)
(display " ")
(displayln (globals))

(mac % args (% args))
(mac w/include (x . body) (w/include x body))
(mac w/exclude (x . body) (w/exclude x body))
(mac w/rename  (x . body) (w/rename x body))
(mac w/prefix  (x . body) (w/prefix x body))
(mac w/lang    (x . body) (w/lang x body))
(mac import args (import args))
(mac export args (export args))
(mac reimport args (reimport args))

;=============================================================================
;  Arc 3.1 special forms
;=============================================================================
(mac square-brackets (body)
     ; TODO ->orig-box
  `(,(->box 'fn) (_) ,body))

(mac if args
  (ac-if args))

(mac fn (parms . body)
  (ac-fn parms body))

(mac quasiquote (x)
  (ac-quasiquote x))

(mac assign (x . rest)
  (ac-assign (cons x rest) "assign"))

(mac quote (x)
  (ac-quote x))

;=============================================================================
;  Arc 3.1 primitives (97 total)
;=============================================================================
; Types
;; TODO: a better argument name than typ
(def annotate (typ rep)
  (if (is? (type rep) typ)
      rep
      (tagged typ rep)))

(assign type #:sig (x) type)

(def rep (x)
  (if (tagged? x)
      (tagged-rep x)
      x))

(assign coerce #:sig (x to (o base 10)) coerce)

; Conses
(assign nil nil)
(assign cons #:sig (x y) cons)
(assign car  #:sig (x)   ac-car)
(assign cdr  #:sig (x)   ac-cdr)

(def scar (p x)
  (cond ((pair? p)    (unsafe-set-mcar! p x))
        ((string? x)  (string-set! p 0 x))
        (else         (raise-type-error 'scar "cons" p)))
  x)

(def scdr (p x)
  (cond ((pair? p)    (unsafe-set-mcdr! p x))
        ((string? x)  (error "can't set cdr of a string" x))
        (else         (raise-type-error 'scdr "cons" p)))
  x)

; Comparison
(assign is #:sig args (make-pairwise is?))
(assign <  #:sig args (make-pairwise (make-comparer < string<? char<?)))
(assign >  #:sig args (make-pairwise (make-comparer > string>? char>?)))

; Numbers
(assign -     #:sig args      -)
(assign *     #:sig args      *)
(assign /     #:sig args      /)
(assign sin   #:sig (x)       sin)
(assign cos   #:sig (x)       cos)
(assign tan   #:sig (x)       tan)
(assign asin  #:sig (x)       asin)
(assign acos  #:sig (x)       acos)
(assign atan  #:sig (x (o y)) atan)
(assign log   #:sig (x)       log) ;; logarithm
(assign mod   #:sig (x y)     modulo)
(assign expt  #:sig (x y)     expt)
(assign sqrt  #:sig (x)       sqrt)

(def exact (x) (tnil (exact-integer? x))) ;; TODO: bad name

(assign + #:sig args (make-reduce ac-+ 0))

(def trunc (x)
  (inexact->exact (truncate x)))

; Streams
(assign sread     #:sig (p eof)                sread)
(assign outstring #:sig ((o name 'string))     open-output-string)
(assign instring  #:sig (str (o name 'string)) open-input-string)
(assign inside    #:sig (out)                  get-output-string)
(assign stdin     #:sig ((o in))               current-input-port)  ; should be a vars
(assign stdout    #:sig ((o out))              current-output-port)
(assign stderr    #:sig ((o err))              current-error-port)
(assign readc     #:sig ((o in (stdin)))       (make-read read-char))
(assign readb     #:sig ((o in (stdin)))       (make-read read-byte))
(assign peekc     #:sig ((o in (stdin)))       (make-read peek-char))
(assign writec    #:sig (c (o out (stdout)))   (make-write write-char))
(assign writeb    #:sig (c (o out (stdout)))   (make-write write-byte))
(assign write     #:sig (x (o out (stdout)))   (make-print write))
(assign disp      #:sig (x (o out (stdout)))   (make-print display))

(def close args
  (for ((x args)) (close1 x))
  (for ((x args)) (try-custodian x)) ;; free any custodian
  nil)

(def infile (path (mode 'binary))
      #:sig (path (o mode 'binary))
  (open-input-file path #:mode mode))

(def outfile (path (mode 'truncate))
       #:sig (path (o mode 'truncate))
  (open-output-file path #:mode 'text #:exists mode))

(def call-w/stdin (port thunk)
  (parameterize ((current-input-port port)) (thunk)))

(def call-w/stdout (port thunk)
  (parameterize ((current-output-port port)) (thunk)))

(def open-socket (num)
  (tcp-listen num 50 #t))

(def socket-accept (s)
  (let ((oc  (current-custodian))
        (nc  (make-custodian)))
    (current-custodian nc)
    (call-with-values
      (lambda () (tcp-accept s))
      (lambda (in out)
        (let ((in1 (make-limited-input-port in 100000 #t)))
          (current-custodian oc)
          (associate-custodian nc in1 out)
          (list in1
                out
                (let-values (((us them) (tcp-addresses out))) them)))))))

;; TODO: should pipe call ((caddddr x) 'wait)?
(def pipe-from (cmd)
         ;; TODO: destructuring
  (let* ((x   (process/ports #f #f (current-error-port) cmd))
         (in  (car x))
         (out (cadr x)))
    ;; Racket docs say I need to close all 3 ports explicitly,
    ;; but the err port doesn't need to be closed, because it's
    ;; redirected to stderr
    (close-output-port out)
    in))

(def client-ip (port)
  (let-values (((x y) (tcp-addresses port))) y))

; Added because Mzscheme buffers output.  Not a permanent part of Arc.
; Only need to use when declare explicit-flush optimization.
(def flushout ()
  (flush-output)
  t)

(def force-close args
  (for ((p args))
    ;; TODO: force-close1
    (when (not (try-custodian p))
      (close1 p)))
  nil)

; OS
;; allow Arc to give up root privileges after it calls open-socket.
;; thanks, Eli!
;;
;; Currently only used by srv.arc
;; TODO does this break on Windows ?
(assign setuid #:sig (i) (get-ffi-obj 'setuid #f (_fun _int -> _int)))

;: TODO: need to use a better seed (Arc 3.1???)
(assign rand                         #:sig ((o n) (o gen)) random)
(assign quit                         #:sig ((o n 0))       exit)
(assign msec                         #:sig ()              current-milliseconds)
(assign current-gc-milliseconds      #:sig ()              current-gc-milliseconds)
(assign current-process-milliseconds #:sig (x)             current-process-milliseconds)
(assign memory                       #:sig ((o custodian)) current-memory-use)
(assign seconds                      #:sig ()              current-seconds)

;; Will system "execute" a half-finished string if thread killed in the
;; middle of generating it?
(def system (command) (system command) nil)
(def rmfile (path)    (delete-file path) nil)

(def file-exists (x) (tnil (file-exists? x)))
(def dir-exists  (x) (tnil (directory-exists? x)))

;; TODO: better dir
(def dir (name)
  (map path->string (directory-list name)))

(def mvfile (old new (flag t))
      #:sig (old new (o flag t))
  (rename-file-or-directory old new (true? flag))
  nil)

(def timedate ((sec (current-seconds)))
        #:sig ((o sec (seconds)))
  (let ((d (seconds->date sec)))
    (list (date-second d)
          (date-minute d)
          (date-hour d)
          (date-day d)
          (date-month d)
          (date-year d))))

; Continuations
(assign ccc #:sig (f (o prompt)) call-with-current-continuation)

; Errors
(assign err #:sig (x . rest) error) ; raise-user-error

(def on-err (errfn f)
  (with-handlers ((exn:fail? errfn)) (f))
  ;; TODO: why does Arc 3.1 implement it like this?
  #|((call-with-current-continuation
     (lambda (k)
       (lambda ()
         (with-handlers ((exn:fail? (lambda (e)
                                      (k (lambda () (errfn e))))))
                        (f))))))|#
  )

; Symbols
(def bound (x)
  (lookup x
    (lambda (_) t)
    (lambda () nil)))

(def uniq ((name 'g) (num nil))
    #:sig ((o name 'g) (o num))
  (ac-uniq name num))

; Other
(assign t t)
(assign newstring #:sig (n (o c #\nul)) make-string)

;; Later may want to have multiple indices.
(def sref (x val key)
  (cond ((hash? x)    (if (false? val)
                          (hash-remove! x key)
                          (hash-set! x key val)))
        ((string? x)  (string-set! x key val))
        ((pair? x)    (unsafe-set-mcar! (list-tail x key) val))
        (else         (error "can't set reference " x key val)))
  val)

(def len (x)
  (cond ((string? x)  (string-length x))
        ((hash? x)    (hash-count x))
        (else         (length x))))

(def eval (expr)
  (eval (ac expr)))

(def apply (f . args)
  ; TODO; is this inefficient?
  (apply apply call f args))



; Threads
(assign new-thread     #:sig (thunk) thread)
(assign kill-thread    #:sig (x)     kill-thread)
(assign break-thread   #:sig (x)     break-thread)
(assign current-thread #:sig ()      current-thread)

(def sleep args #:sig ((o sec 0)) (apply sleep args) nil)

(def dead (x) (tnil (thread-dead? x)))

;; TODO: make this better
(def atomic-invoke (f)
  (if (thread-cell-ref sema-cell)
      ;; TODO: why are these call...?
      (call f)
      (begin (thread-cell-set! sema-cell #t)
             (dynamic-wind (lambda () #t)
                           (lambda ()
                             (call-with-semaphore
                               the-sema
                               (lambda () (call f))))
                           (lambda ()
                             (thread-cell-set! sema-cell #f))))))

; Continuations
(def protect (during after)
  (dynamic-wind (lambda () #t) during after))

; Tables
(def table ((init nil))
     #:sig ((o init))
  (let ((h (make-hash)))
    (when (true? init)
      (init h))
    h))

(def maptable (fn table)
  (hash-for-each table fn) ; arg is (fn (key value) ...)
  table)

; Errors
(assign details #:sig (e) exn-message)

; Symbols
(assign macex1 #:sig (e) macex1)
(assign macex  #:sig (e) macex)

(def ssyntax (x) (tnil (ssyntax? x)))

(def ssexpand (x)
  (if (symbol? x) (ssexpand x) x))

; Other
(assign sig sig)

(def declare (key val)
  (let ((flag (true? val)))
    (case key
      ((atstrings)      (atstrings      flag))
      ((direct-calls)   (direct-calls   flag))
      ;((inline-calls)   (set! inline-calls   flag))
      ((explicit-flush) (explicit-flush flag))
      (else             (warn "invalid declare mode " key)))
    val))

(ac-load (rel-path "arc.arc") #:export #t)
