(def expand-full (x)
  (if (isa x 'cons)
        (let x macex.x
          (if (isa x 'cons)
              (let c (expand-full car.x)
                #|(if (caris c compose)
                      (expand-full (ac-decompose (cdr c) cdr.x))
                    (caris c complement)
                      (list no (expand-full (cons cadr.c cdr.x)))
                    )  
                    |#
                    (cons c (map expand-full cdr.x)))
              expand-full.x))
      ssyntax.x
        ssexpand.x
      x))

(def my-setforms (place)
  (let place expand-full.place
    (if (isa place 'cons)
        (withs (bind  nil
                vars  (map (fn (x)
                             (if (and (acons x)
                                      (no:caris x 'quote))
                                 (w/uniq u
                                   (= bind (list* x u bind))
                                   u)
                                 x))
                           cdr.place))
          (list (rev bind)
                (list* 'ref car.place vars)
                (fn (x) `(sref ,car.place ,x ,@vars))))
        (list nil place (fn (x) `(assign ,place ,x))))))

(mac w/setforms (name . body)
  (w/uniq bind
    `(let (,bind get set) (my-setforms ,name)
       ;; TODO: unsure about this...
       (if ,bind  `(with ,,bind ,,@body)
                  `(do          ,,@body)))))
