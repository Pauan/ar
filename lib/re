(def ->re (pattern)
  (if (str? pattern)
      ((% pregexp) pattern)
      pattern))

(def ->input (x)
  (if (str? x)
      ((% open-input-string) x)
      x))

(const re-escape (% regexp-quote))

(def re (pat str)
  (let f (if (str? str)
             (% regexp-match)
             (% regexp-try-match))
    (let f (f pat str)
      (if f (map-fn str f) f)))) ; TODO or

(def re? (pat str)
  ((% tnil) ((% regexp-match?) pat str)))

(mac re-multi (x . body)
  (w/uniq (u v)
    '(let u x
       ,(alet body (pair body)
          (iflet ((pat f) . rest) body
            '(iflet v (re pat u)
               (apply f v)
               ,(self rest)))))))

#|(mac w/re-matcher (vars match (o after))
  (w/uniq u
    (w/sym it
      (let (p in) vars
        '(with (p   (regexp p)
                in  (if (string? in)
                        (instring in)
                        in)
                it  %.regexp-try-match)
           (whenlet u match
             (maplet it u
                        ;; TODO: figure out how to get rid of this `if`
               ,(let x '(if (%.bytes? it)
                            (%.bytes->string/utf-8 it)
                            it)
                  (if after
                      '(let it after x)
                      x)))))))))

(def re-match (pattern (o in (stdin)))
  (w/re-matcher (pattern in)
    (it pattern in)))

(def re-match* (pattern (o in (stdin)) (o group 0))
  (w/re-matcher (pattern in)
    (drain (it pattern in) #f)
    (it group)))

(def re-match1 (pattern (o in (stdin)))
  (car:re-match pattern in))

(def re-posmatch (pattern (o in stdin))
  (or (%.regexp-match-positions regexp.pattern in) nil))

(def re-posmatch1 (pattern (o in stdin))
  (car:re-posmatch pattern in))

; This isn't anchored at the beginning of the input unless you use
; "^" yourself.
(def re-looking-at (pattern (o in stdin))
  ;; TODO: different ssyntax priorities
  (%.tnil (%.regexp-match-peek regexp.pattern in)))


(def re-replace (pattern in replace)
  (%.regexp-replace regexp.pattern in replace))

;; TODO: what should this be called...?
(def re-replace* (pattern in replace)
  (%.regexp-replace* regexp.pattern in replace))

(mac re-multi-replace (x . args)
  ((afn (((from to (o g)) . rest))
     (list (if g %.regexp-replace*
                 %.regexp-replace)
           (regexp:string from)
           (if rest self.rest x)
           to))
   rev.args))


(def re-split (x y)
  (%.regexp-split regexp.x y))|#
