;; converts S-expressions into XML

(var xml-declaration "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
     html-doctype    "<!DOCTYPE html>")

; http://dev.w3.org/html5/markup/syntax.html#void-element
(var html-void-elements ["area" "base" "br" "col" "command" "embed" "hr" "img" "input"
                         "keygen" "link" "meta" "param" "source" "track" "wbr"])

(def normalize (x)
  (let (l r) (until (x . rest) (cdr x)
               (or (cons? x) (not (cons? rest))))
    (list* (car x) (pair l) r)))

(def attrs (y)
  (map (k v) y
    (str " " k "=\"" v "\"")))

(def ->xml/html (x space new start void)
  (str start new
    (awith (x  x
            i  0)
      (let (x y . body) (normalize x)
        (if (any y void (is x y))
              (if body
                  (err "void element may not have content: " x)
                  (str "<" x (attrs y) "/>"))
            (cons? body)
              (let cont? nil
                (str "<" x (attrs y) ">"
                       (map x body
                         (if (str? x)
                             x
                             (do (= cont? t)
                                 (str new (n-of (+ i 1) space)
                                          (self x (+ i 1))))))
                     (when cont? (str new (n-of i space)))
                     "</" x ">"))
            (if void
                (str "<" x (attrs y) "></" x ">")
                (str "<" x (attrs y) "/>")))))))

(def ->xml (x (o space "  ") (o new "\n"))
  (->xml/html x space new xml-declaration nil))

(def ->html (x (o space "  ") (o new "\n"))
  (->xml/html x space new html-doctype html-void-elements))
